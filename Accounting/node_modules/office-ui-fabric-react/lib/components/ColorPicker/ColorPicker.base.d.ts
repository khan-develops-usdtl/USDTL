/// <reference types="react" />
import * as React from 'react';
import { IColorPickerProps, IColorPicker } from './ColorPicker.types';
import { IColor } from '../../utilities/color/interfaces';
export declare type IRGBHex = Pick<IColor, 'r' | 'g' | 'b' | 'a' | 'hex'>;
export interface IColorPickerState {
    color: IColor;
    editingColor?: {
        component: keyof IRGBHex;
        value: string;
    };
}
/**
 * {@docCategory ColorPicker}
 */
export declare class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {
    static defaultProps: {
        hexLabel: string;
        redLabel: string;
        greenLabel: string;
        blueLabel: string;
        alphaLabel: string;
    };
    private _textChangeHandlers;
    private _textLabels;
    constructor(props: IColorPickerProps);
    readonly color: IColor;
    componentWillReceiveProps(newProps: IColorPickerProps): void;
    render(): JSX.Element;
    private _getDisplayValue(component);
    private _onSVChanged;
    private _onHChanged;
    private _onAChanged;
    private _onTextChange(component, event, newValue?);
    private _onBlur;
    /**
     * Update the displayed color and call change handlers if appropriate.
     * @param ev - Event if call was triggered by an event (undefined if triggered by props change)
     * @param newColor - Updated color
     */
    private _updateColor(ev, newColor);
}
