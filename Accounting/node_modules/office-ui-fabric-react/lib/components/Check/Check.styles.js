import { HighContrastSelector, getGlobalClassNames } from '../../Styling';
import { getRTL } from '../../Utilities';
export var CheckGlobalClassNames = {
    root: 'ms-Check',
    circle: 'ms-Check-circle',
    check: 'ms-Check-check',
    /** Must be manually applied to the parent element of the check. */
    checkHost: 'ms-Check-checkHost'
};
export var getStyles = function (props) {
    var _a = props.checkBoxHeight, checkBoxHeight = _a === void 0 ? '18px' : _a, checked = props.checked, useGlobalCheckHostClass = props.useGlobalCheckHostClass, className = props.className, theme = props.theme;
    var palette = theme.palette, semanticColors = theme.semanticColors;
    var isRTL = getRTL();
    var classNames = getGlobalClassNames(CheckGlobalClassNames, theme);
    var sharedCircleCheck = {
        fontSize: checkBoxHeight,
        position: 'absolute',
        left: 0,
        top: 0,
        width: checkBoxHeight,
        height: checkBoxHeight,
        textAlign: 'center',
        verticalAlign: 'middle'
    };
    var checkHostClass = useGlobalCheckHostClass ? CheckGlobalClassNames.checkHost : '$checkHost';
    return {
        root: [
            classNames.root,
            theme.fonts.medium,
            {
                // lineHeight currently needs to be a string to output without 'px'
                lineHeight: '1',
                width: checkBoxHeight,
                height: checkBoxHeight,
                verticalAlign: 'top',
                position: 'relative',
                userSelect: 'none',
                selectors: (_b = {
                        ':before': {
                            content: '""',
                            position: 'absolute',
                            top: '1px',
                            right: '1px',
                            bottom: '1px',
                            left: '1px',
                            borderRadius: '50%',
                            opacity: 1,
                            background: semanticColors.bodyBackground
                        }
                    },
                    _b["." + checkHostClass + ":hover &, ." + checkHostClass + ":focus &, &:hover, &:focus"] = {
                        opacity: 1
                    },
                    _b)
            },
            checked && [
                'is-checked',
                {
                    selectors: {
                        ':before': {
                            background: palette.themePrimary,
                            opacity: 1,
                            selectors: (_c = {},
                                _c[HighContrastSelector] = {
                                    background: 'Window'
                                },
                                _c)
                        }
                    }
                }
            ],
            className
        ],
        circle: [
            classNames.circle,
            sharedCircleCheck,
            {
                color: palette.neutralTertiaryAlt,
                selectors: (_d = {},
                    _d[HighContrastSelector] = {
                        color: 'WindowText'
                    },
                    _d)
            },
            checked && {
                color: palette.white
            }
        ],
        check: [
            classNames.check,
            sharedCircleCheck,
            {
                opacity: 0,
                color: palette.neutralTertiaryAlt,
                fontSize: '16px',
                left: isRTL ? '-0.5px' : '.5px',
                selectors: (_e = {
                        ':hover': {
                            opacity: 1
                        }
                    },
                    _e[HighContrastSelector] = {
                        MsHighContrastAdjust: 'none'
                    },
                    _e)
            },
            checked && {
                opacity: 1,
                color: palette.white,
                fontWeight: 900,
                selectors: (_f = {},
                    _f[HighContrastSelector] = {
                        border: 'none',
                        color: 'WindowText'
                    },
                    _f)
            }
        ],
        checkHost: [{}]
    };
    var _b, _c, _d, _e, _f;
};
//# sourceMappingURL=Check.styles.js.map