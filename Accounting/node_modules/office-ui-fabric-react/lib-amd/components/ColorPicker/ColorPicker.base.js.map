{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations } from '../../Utilities';\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles, IColorPicker } from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\n// These imports are separated to help with bundling\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_HUE,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX\n} from '../../utilities/color/consts';\nimport { IColor, IRGB } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\n\nexport type IRGBHex = Pick<IColor, 'r' | 'g' | 'b' | 'a' | 'hex'>;\n\nexport interface IColorPickerState {\n  color: IColor;\n  editingColor?: {\n    component: keyof IRGBHex;\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst colorComponents: Array<keyof IRGBHex> = ['hex', 'r', 'g', 'b', 'a'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps = {\n    hexLabel: 'Hex',\n    redLabel: 'Red',\n    greenLabel: 'Green',\n    blueLabel: 'Blue',\n    alphaLabel: 'Alpha'\n  };\n\n  private _textChangeHandlers: {\n    [K in keyof IRGBHex]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\n  };\n  private _textLabels: { [K in keyof IRGBHex]?: string };\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations('ColorPicker', props, {\n      onColorChanged: 'onChange'\n    });\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of colorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n    this._textLabels = {\n      r: props.redLabel,\n      g: props.greenLabel,\n      b: props.blueLabel,\n      a: props.alphaLabel,\n      hex: props.hexLabel\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentWillReceiveProps(newProps: IColorPickerProps): void {\n    const color = _getColorFromProps(newProps);\n    if (color) {\n      this._updateColor(undefined, color);\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const { theme, className, styles } = props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.panel}>\n          <ColorRectangle color={color} onChange={this._onSVChanged} />\n          <ColorSlider className=\"is-hue\" minValue={0} maxValue={MAX_COLOR_HUE} value={color.h} onChange={this._onHChanged} />\n          {!props.alphaSliderHidden && (\n            <ColorSlider\n              className=\"is-alpha\"\n              isAlpha\n              overlayStyle={{ background: `linear-gradient(to right, transparent 0, #${color.hex} 100%)` }}\n              minValue={0}\n              maxValue={MAX_COLOR_ALPHA}\n              value={color.a}\n              onChange={this._onAChanged}\n            />\n          )}\n          <table className={classNames.table} cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{props.hexLabel}</td>\n                <td>{props.redLabel}</td>\n                <td>{props.greenLabel}</td>\n                <td>{props.blueLabel}</td>\n                {!props.alphaSliderHidden && <td>{props.alphaLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {...colorComponents.map((comp: keyof IRGBHex) => {\n                  if (comp === 'a' && props.alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp} style={comp === 'hex' ? undefined : { width: '18%' }}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._onBlur}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={this._textLabels[comp]}\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: keyof IColor): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (color[component] === null || color[component] === undefined) {\n      return '';\n    } else {\n      return String(color[component]);\n    }\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\n    this._updateColor(ev, updateA(this.state.color, Math.round(a)));\n  };\n\n  private _onTextChange(component: keyof IRGBHex, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      // Reset the value\n      // TODO: once TextField controlled mode works properly, just return without setting state\n      this.setState({ color: color });\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      } else {\n        // TODO: remove once TextField is properly controlled\n        this.setState({ color: color });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : getColorFromRGBA({\n            ...(color as IRGB),\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue)\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value)\n          } as IRGB)\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string, too short (hex only), or just . (alpha only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      this.setState({ color: newColor, editingColor: undefined }, () => {\n        if (ev && this.props.onChange) {\n          this.props.onChange(ev, newColor);\n        }\n\n        // To preserve the existing behavior, this one is called even when the change comes from a\n        // props update (which is not very useful)\n        if (this.props.onColorChanged) {\n          this.props.onColorChanged(newColor.str, newColor);\n        }\n      });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]}