{"version":3,"file":"slots.js","sourceRoot":"../src/","sources":["slots.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IStyle, mergeStyles } from '@uifabric/styling';\nimport { memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProps,\n  ISlotPropValue,\n  ISlotRenderer,\n  IDefaultSlotProps,\n  IProcessedSlotProps\n} from './ISlots';\n\n// TODO: Is getting only div props for 'root' slots is pretty limiting? Or is it exactly as it needs to be?\n//        Another example is getting Toggle state for `label` slot render functions. Should it get Toggle props instead?\n//        Needs more usage to rationalize the best approach. If we want component props, component props are passed\n//        as each slot as rendered and aren't available when getSlots is called. This would substantially change this approach.\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.SFC<P> | string,\n  props?: React.Attributes & P | null,\n  // tslint:disable-next-line:missing-optional-annotation\n  ...children: React.ReactNode[]\n): React.ReactElement<P> | JSX.Element | null {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    const numChildren = React.Children.count(children);\n    if (numChildren === 0) {\n      return slotType(props);\n    }\n\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param ComponentType - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps>(\n  ComponentType: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {}\n): ISlotFactory<TProps> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps> = (componentProps, userProps, defaultStyles) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    // If we're rendering a function, let the user resolve how to render given the original component and final args.\n    if (typeof userProps === 'function') {\n      const render: ISlotRenderer<TProps> = (slotRenderFunction, renderProps) => {\n        // TODO: _translateShorthand is returning TProps, so why is the finalProps cast required?\n        // TS isn't respecting the difference between props arg type and return type and instead treating both as ISlotPropValue.\n        let finalRenderProps = _translateShorthand(defaultProp, renderProps) as TProps;\n        finalRenderProps = _constructFinalProps(defaultStyles, componentProps, finalRenderProps);\n\n        return slotRenderFunction(ComponentType, finalRenderProps);\n      };\n      return userProps(render);\n    }\n\n    userProps = _translateShorthand(defaultProp, userProps);\n    // TODO: _translateShorthand is returning TProps, so why is the finalProps cast required?\n    // TS isn't respecting the difference between props arg type and return type and instead treating both as ISlotPropValue.\n    const finalProps = _constructFinalProps(defaultStyles, componentProps, userProps) as TProps;\n\n    return <ComponentType {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TProps extends TSlots, TSlots extends ISlotProps<TProps, TSlots>>(\n  userProps: TProps,\n  slots: ISlotDefinition<Required<TSlots>>\n): ISlots<Required<TSlots>> {\n  const result: ISlots<Required<TSlots>> = {} as ISlots<Required<TSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TProps & IDefaultSlotProps<TSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React detects\n      //  each closure as a different component (since it is a new instance) from the previous one and then forces a rerender of the entire\n      //  slot subtree. For now, the only way to avoid this is to use withSlots, which bypasses the call to React.createElement.\n      const slot: ISlot<keyof TSlots> = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        return _renderSlot(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name]\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that constructs a props object when given shorthand props.\n */\nfunction _translateShorthand<TProps>(defaultProp: string, props: ISlotPropValue<TProps>): TProps {\n  if (typeof props === 'string' || typeof props === 'number' || typeof props === 'boolean') {\n    props = {\n      [defaultProp]: props as any\n    } as TProps;\n  }\n  return props;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(defaultStyles: IStyle, ...allProps: (TProps | undefined)[]): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, ...(props as any));\n  }\n\n  finalProps.className = mergeStyles(defaultStyles, classNames);\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<TComponent extends ISlottableReactType<TProps>, TProps, TSlots>(\n  ComponentType: TComponent,\n  componentProps: TProps,\n  userProps: TProps,\n  defaultStyles: IStyle\n): JSX.Element {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, defaultStyles);\n  } else {\n    return defaultFactory(ComponentType)(componentProps, userProps, defaultStyles);\n  }\n}\n"]}