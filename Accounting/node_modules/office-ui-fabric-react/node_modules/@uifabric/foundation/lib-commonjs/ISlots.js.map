{"version":3,"file":"ISlots.js","sourceRoot":"../src/","sources":["ISlots.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle } from '@uifabric/styling';\nimport { IComponentStyles, IPropsWithChildren } from './IComponent';\n\n/**\n * Signature of components that have component factories.\n */\nexport interface ISlotCreator<TProps> {\n  create?: ISlotFactory<TProps>;\n}\n\n/**\n * Slottable version of React.ComponentType.\n */\nexport type ISlottableComponentType<TProps> = React.ComponentType<TProps> & ISlotCreator<TProps>;\n\n/**\n * Slottable version of React.ReactType.\n */\nexport type ISlottableReactType<TProps> = React.ReactType<TProps> & ISlotCreator<TProps>;\n\n/**\n * Props generated by Foundation.\n */\nexport interface IProcessedSlotProps {\n  className?: string;\n}\n\n/**\n * An interface for defining slots. Each key in TSlot must point to an ISlottableType.\n */\nexport type ISlotDefinition<TSlots> = { [prop in keyof TSlots]: ISlottableReactType<TSlots[prop]> };\n\n/**\n * Created Slot structure used for rendering by components.\n */\nexport type ISlot<TProps> = ((componentProps: IPropsWithChildren<TProps> | undefined | null) => JSX.Element) & { isSlot?: boolean };\n\n/**\n * Interface for a slot factory that consumes both componnent and user slot prop and generates rendered output.\n */\nexport type ISlotFactory<TProps> = (\n  componentProps: TProps & IProcessedSlotProps,\n  userProps: ISlotPropRenderFunction<TProps> | (ISlotPropValue<TProps> & IProcessedSlotProps) | undefined,\n  defaultStyles: IStyle\n) => JSX.Element;\n\n/**\n * Interface for aggregated slots objects used internally by components.\n */\nexport type ISlots<TSlots> = { [slot in keyof TSlots]: ISlot<TSlots[slot]> };\nexport type ISlotProps<TProps extends TSlots, TSlots> = { [key in keyof TSlots]: ISlotProp<TProps[key]> };\n\n/**\n * User properties that are automatically applied by Slot utilities using slot name.\n */\nexport interface IDefaultSlotProps<TSlots> {\n  _defaultStyles: IComponentStyles<TSlots>;\n}\n\n/**\n * Slot type used for defining Slot props. This interface defines the following slot properties:\n *    1. ISlotPropValue.\n *    2. ISlotRender function.\n */\nexport type ISlotProp<TProps, TShorthandPropType = never> =\n  | ISlotPropValue<TProps, TShorthandPropType>\n  | ISlotPropRenderFunction<TProps, TShorthandPropType>;\n\n/**\n * Slot type used for defining Slot props. This interface defines the following slot properties:\n *    1. Component props object (defined by TProps.)\n *    2. ISlotRender function.\n *    3. Optional shorthand prop type, defined by TShorthandPropType.\n * The conditional type check automatically applies 'children' prop to TProps if TShorthandPropType is ReactNode.\n */\nexport type ISlotPropValue<TProps, TShorthandPropType = never> =\n  | TShorthandPropType\n  | TProps\n  | (TShorthandPropType extends React.ReactNode ? IPropsWithChildren<TProps> : never);\n\n/**\n * Render function interface used by Slot props.\n */\nexport type ISlotPropRenderFunction<TProps, TShorthandPropType = never> = (\n  render: ISlotRenderer<TProps, TShorthandPropType>\n) => JSX.Element;\n\n/**\n * Render function interface used by Slot props.\n */\nexport type ISlotRenderer<TProps, TShorthandPropType = never> = (\n  renderContent: ISlotRender<TProps>,\n  props?: ISlotPropValue<TProps, TShorthandPropType>\n) => JSX.Element;\n\n/**\n * Content rendering provided by component.\n */\nexport type ISlotRender<TProps> = (componentType: React.ReactType<TProps>, props: TProps) => JSX.Element;\n"]}