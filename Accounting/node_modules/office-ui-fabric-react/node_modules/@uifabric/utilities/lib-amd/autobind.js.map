{"version":3,"file":"autobind.js","sourceRoot":"../src/","sources":["autobind.ts"],"names":[],"mappings":";;;IAAA;;;;OAIG;IACH;IACE,kCAAkC;IAClC,MAAW,EACX,GAAW,EACX,UAAsC;QAOtC,IAAI,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;QAE1B,IAAI,QAAQ,GAAG,KAAK,CAAC;QAErB,OAAO;YACL,YAAY,EAAE,IAAI;YAElB,GAAG,EAAH;gBACE,IAAI,QAAQ,IAAI,CAAC,EAAE,IAAI,IAAI,KAAK,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBACzE,OAAO,EAAO,CAAC;iBAChB;gBAED,uFAAuF;gBACvF,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAElC,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBAC/B,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,OAAO;iBACf,CAAC,CAAC;gBACH,QAAQ,GAAG,KAAK,CAAC;gBAEjB,OAAO,OAAO,CAAC;YACjB,CAAC;YAED,kCAAkC;YAClC,GAAG,EAAH,UAAI,QAAa;gBACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBAC/B,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,QAAQ;iBAChB,CAAC,CAAC;YACL,CAAC;SACF,CAAC;IACJ,CAAC;IAhDD,4BAgDC","sourcesContent":["/**\n * Autobind is a utility for binding methods in a class. This simplifies tagging methods as being \"bound\" to the this pointer\n * so that they can be used in scenarios that simply require a function callback.\n * @deprecated This has been deprecated in favor of using arrow function properties\n */\nexport function autobind<T extends Function>(\n  // tslint:disable-next-line:no-any\n  target: any,\n  key: string,\n  descriptor: TypedPropertyDescriptor<T>\n): {\n  configurable: boolean;\n  get(): T;\n  // tslint:disable-next-line:no-any\n  set(newValue: any): void;\n} | void {\n  let fn = descriptor.value;\n\n  let defining = false;\n\n  return {\n    configurable: true,\n\n    get(): T {\n      if (defining || (fn && this === fn.prototype) || this.hasOwnProperty(key)) {\n        return fn as T;\n      }\n\n      // Bind method only once, and update the property to return the bound value from now on\n      let fnBound = fn && fn.bind(this);\n\n      defining = true;\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: fnBound\n      });\n      defining = false;\n\n      return fnBound;\n    },\n\n    // tslint:disable-next-line:no-any\n    set(newValue: any): void {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: newValue\n      });\n    }\n  };\n}\n"]}