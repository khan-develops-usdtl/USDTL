define(["require", "exports", "./CommonStyles", "@uifabric/utilities", "./zIndexes"], function (require, exports, CommonStyles_1, utilities_1, zIndexes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {
        if (typeof insetOrOptions === 'number' || !insetOrOptions) {
            return _getFocusStyleInternal(theme, { inset: insetOrOptions, position: position, highContrastStyle: highContrastStyle, borderColor: borderColor, outlineColor: outlineColor, isFocusedOnly: isFocusedOnly });
        }
        else {
            return _getFocusStyleInternal(theme, insetOrOptions);
        }
    }
    exports.getFocusStyle = getFocusStyle;
    function _getFocusStyleInternal(theme, options) {
        if (options === void 0) { options = {}; }
        var _a = options.inset, inset = _a === void 0 ? 0 : _a, _b = options.width, width = _b === void 0 ? 1 : _b, _c = options.position, position = _c === void 0 ? 'relative' : _c, highContrastStyle = options.highContrastStyle, _d = options.borderColor, borderColor = _d === void 0 ? theme.palette.white : _d, _e = options.outlineColor, outlineColor = _e === void 0 ? theme.palette.neutralSecondary : _e, _f = options.isFocusedOnly, isFocusedOnly = _f === void 0 ? true : _f;
        return {
            // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
            outline: 'transparent',
            // Requirement because pseudo-element is absolutely positioned.
            position: position,
            selectors: (_g = {
                    // Clear the focus border in Firefox.
                    // Reference: http://stackoverflow.com/a/199319/1436671
                    '::-moz-focus-inner': {
                        border: '0'
                    }
                },
                // When the element that uses this mixin is in a :focus state, add a pseudo-element to
                // create a border.
                _g["." + utilities_1.IsFocusVisibleClassName + " &" + (isFocusedOnly ? ':focus' : '') + ":after"] = {
                    content: '""',
                    position: 'absolute',
                    left: inset + 1,
                    top: inset + 1,
                    bottom: inset + 1,
                    right: inset + 1,
                    border: width + "px solid " + borderColor,
                    outline: width + "px solid " + outlineColor,
                    zIndex: zIndexes_1.ZIndexes.FocusStyle,
                    selectors: (_h = {},
                        _h[CommonStyles_1.HighContrastSelector] = highContrastStyle,
                        _h)
                },
                _g)
        };
        var _g, _h;
    }
    /**
     * Generates style to clear browser specific focus styles.
     */
    function focusClear() {
        return {
            selectors: {
                '&::-moz-focus-inner': {
                    // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
                    border: 0
                },
                '&': {
                    // Clear browser specific focus styles and use transparent as placeholder for focus style
                    outline: 'transparent'
                }
            }
        };
    }
    exports.focusClear = focusClear;
    /**
     * Generates a style which can be used to set a border on focus.
     *
     * @param theme - The theme object to use.
     * @param inset - The number of pixels to inset the border (default 0)
     * @param width - The border width in pixels (default 1)
     * @param color - Color of the outline (default `theme.palette.neutralSecondary`)
     * @returns The style object.
     */
    function getFocusOutlineStyle(theme, inset, width, color) {
        if (inset === void 0) { inset = 0; }
        if (width === void 0) { width = 1; }
        return {
            selectors: (_a = {},
                _a[":global(" + utilities_1.IsFocusVisibleClassName + ") &:focus"] = {
                    outline: width + " solid " + (color || theme.palette.neutralSecondary),
                    outlineOffset: -inset + "px"
                },
                _a)
        };
        var _a;
    }
    exports.getFocusOutlineStyle = getFocusOutlineStyle;
});
//# sourceMappingURL=getFocusStyle.js.map