{"version":3,"file":"ColorSlider.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider/ColorSlider.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, EventGroup, KeyCodes, getWindow, warnDeprecations } from '../../../Utilities';\nimport { IColorSliderProps, IColorSliderStyleProps, IColorSliderStyles, IColorSlider } from './ColorSlider.types';\nimport { clamp } from '../../../utilities/color/clamp';\n\nconst getClassNames = classNamesFunction<IColorSliderStyleProps, IColorSliderStyles>();\n\nexport interface IColorSliderState {\n  currentValue: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorSliderBase extends React.Component<IColorSliderProps, IColorSliderState> implements IColorSlider {\n  public static defaultProps: Partial<IColorSliderProps> = {\n    minValue: 0,\n    maxValue: 100,\n    value: 0\n  };\n\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor'\n    });\n\n    this.state = {\n      currentValue: props.value || 0\n    };\n  }\n\n  public get value(): number {\n    return this.state.currentValue;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorSliderProps>, prevState: Readonly<IColorSliderState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({ currentValue: this.props.value });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { isAlpha, minValue, maxValue, overlayStyle, overlayColor, theme, className, styles } = this.props;\n    const { ariaLabel = isAlpha ? 'Alpha' : 'Hue' } = this.props;\n    const currentValue = this.value;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isAlpha\n    });\n\n    const currentPercentage = (100 * (currentValue! - minValue!)) / (maxValue! - minValue!);\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        tabIndex={0}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        role=\"slider\"\n        aria-valuenow={currentValue}\n        // Narrator doesn't read aria-valuenow properly\n        aria-valuetext={String(currentValue)}\n        aria-valuemin={minValue}\n        aria-valuemax={maxValue}\n        aria-label={ariaLabel}\n        data-is-focusable={true}\n      >\n        {!!(overlayStyle || overlayColor) && (\n          <div\n            className={classNames.sliderOverlay}\n            // this isn't included in getStyles because it may change frequently\n            style={overlayStyle || { background: `linear-gradient(to right, transparent 0, #${overlayColor} 100%)` }}\n          />\n        )}\n        <div className={classNames.sliderThumb} style={{ left: currentPercentage + '%' }} />\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent): void => {\n    let currentValue = this.value;\n    const { minValue, maxValue } = this.props;\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.left: {\n        currentValue -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        currentValue += increment;\n        break;\n      }\n      case KeyCodes.home: {\n        currentValue = minValue!;\n        break;\n      }\n      case KeyCodes.end: {\n        currentValue = maxValue!;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    this._updateValue(ev, clamp(currentValue, maxValue!, minValue));\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const win = getWindow(this as any);\n\n    this._events.on(win, 'mousemove', this._onMouseMove, true);\n    this._events.on(win, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const { minValue, maxValue } = this.props;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = clamp(Math.round(currentPercentage * maxValue!), maxValue!, minValue!);\n\n    this._updateValue(ev, newValue);\n  };\n\n  private _onMouseUp = (): void => {\n    this._events.off();\n  };\n\n  private _updateValue(ev: React.MouseEvent | React.KeyboardEvent, newValue: number) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  }\n}\n"]}