{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics } from '../../Utilities';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5,\n  unknown = 999\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    constructor(props: TProps) {\n      super(props);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: _defaultMode || _lastMode || ResponsiveMode.large\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent ref={this._updateComposedComponentRef} responsiveMode={responsiveMode} {...this.props as any} />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = this._getResponsiveMode();\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode: responsiveMode\n        });\n      }\n    };\n\n    private _getResponsiveMode(): ResponsiveMode {\n      let responsiveMode = ResponsiveMode.small;\n      const element = findDOMNode(this) as Element;\n      const win = getWindow(element);\n\n      if (typeof win !== 'undefined') {\n        try {\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n            responsiveMode++;\n          }\n        } catch (e) {\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n          responsiveMode = _defaultMode || _lastMode || ResponsiveMode.large;\n        }\n\n        // Tracking last mode just gives us a better default in future renders,\n        // which avoids starting with the wrong value if we've measured once.\n        _lastMode = responsiveMode;\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error(\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\n              'Call setResponsiveMode to define what the responsive mode is.'\n          );\n        }\n      }\n\n      return responsiveMode;\n    }\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n"]}