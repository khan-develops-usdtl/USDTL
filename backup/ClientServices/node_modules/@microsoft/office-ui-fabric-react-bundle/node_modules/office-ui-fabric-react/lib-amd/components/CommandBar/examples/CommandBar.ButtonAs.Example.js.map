{"version":3,"file":"CommandBar.ButtonAs.Example.js","sourceRoot":"../src/","sources":["components/CommandBar/examples/CommandBar.ButtonAs.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\nimport { CommandBarButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\nimport { DirectionalHint } from 'office-ui-fabric-react/lib/Callout';\nimport {\n  IContextualMenuItemProps,\n  ContextualMenuItem,\n  IContextualMenuItemStyles,\n  IContextualMenuStyles\n} from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { getTheme } from 'office-ui-fabric-react/lib/Styling';\n\nconst theme = getTheme();\n// Styles for both command bar and overflow/menu items\nconst itemStyles: Partial<IContextualMenuItemStyles> = {\n  label: { fontSize: 18 },\n  icon: { color: theme.palette.red },\n  iconHovered: { color: theme.palette.redDark }\n};\n// For passing the styles through to the context menus\nconst menuStyles: Partial<IContextualMenuStyles> = {\n  subComponentStyles: { menuItem: itemStyles, callout: {} }\n};\n\n// Custom renderer for main command bar items\nconst CustomButton: React.FunctionComponent<IButtonProps> = props => {\n  const buttonOnMouseClick = () => alert(`${props.text} clicked`);\n  return (\n    <CommandBarButton\n      {...props}\n      onClick={buttonOnMouseClick}\n      styles={{\n        ...props.styles,\n        ...itemStyles\n      }}\n    />\n  );\n};\n\n// Custom renderer for menu items (these must have a separate custom renderer because it's unlikely\n// that the same component could be rendered properly as both a command bar item and menu item).\n// It's also okay to custom render only the command bar items without changing the menu items.\nconst CustomMenuItem: React.FunctionComponent<IContextualMenuItemProps> = props => {\n  const buttonOnMouseClick = () => alert(`${props.item.text} clicked`);\n  // Due to ContextualMenu implementation quirks, passing styles here doesn't work\n  return <ContextualMenuItem {...props} onClick={buttonOnMouseClick} />;\n};\n\nconst overflowProps: IButtonProps = {\n  ariaLabel: 'More commands',\n  menuProps: {\n    contextualMenuItemAs: CustomMenuItem,\n    // Styles are passed through to menu items here\n    styles: menuStyles,\n    items: [], // CommandBar will determine items rendered in overflow\n    isBeakVisible: true,\n    beakWidth: 20,\n    gapSpace: 10,\n    directionalHint: DirectionalHint.topCenter\n  }\n};\n\nexport const CommandBarButtonAsExample: React.FunctionComponent = () => {\n  return (\n    <CommandBar\n      overflowButtonProps={overflowProps}\n      // Custom render all buttons\n      buttonAs={CustomButton}\n      items={_items}\n      overflowItems={_overflowItems}\n      farItems={_farItems}\n      ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n    />\n  );\n};\n\nconst _items: ICommandBarItemProps[] = [\n  {\n    key: 'newItem',\n    text: 'New',\n    iconProps: { iconName: 'Add' },\n    subMenuProps: {\n      // Must specify the menu item type for submenus too!\n      contextualMenuItemAs: CustomMenuItem,\n      // Styles are passed through to menu items here\n      styles: menuStyles,\n      items: [\n        { key: 'emailMessage', text: 'Email message', iconProps: { iconName: 'Mail' } },\n        { key: 'calendarEvent', text: 'Calendar event', iconProps: { iconName: 'Calendar' } }\n      ]\n    }\n  },\n  { key: 'upload', text: 'Upload', iconProps: { iconName: 'Upload' }, href: 'https://dev.office.com/fabric' },\n  { key: 'share', text: 'Share', iconProps: { iconName: 'Share' }, onClick: () => console.log('Share') },\n  { key: 'download', text: 'Download', iconProps: { iconName: 'Download' }, onClick: () => console.log('Download') }\n];\n\nconst _overflowItems: ICommandBarItemProps[] = [\n  { key: 'move', text: 'Move to...', onClick: () => console.log('Move to'), iconProps: { iconName: 'MoveToFolder' } },\n  { key: 'copy', text: 'Copy to...', onClick: () => console.log('Copy to'), iconProps: { iconName: 'Copy' } },\n  { key: 'rename', text: 'Rename...', onClick: () => console.log('Rename'), iconProps: { iconName: 'Edit' } }\n];\n\nconst _farItems: ICommandBarItemProps[] = [\n  {\n    key: 'tile',\n    text: 'Grid view',\n    // This needs an ariaLabel since it's icon-only\n    ariaLabel: 'Grid view',\n    iconOnly: true,\n    iconProps: { iconName: 'Tiles' },\n    onClick: () => console.log('Tiles')\n  },\n  { key: 'info', text: 'Info', ariaLabel: 'Info', iconOnly: true, iconProps: { iconName: 'Info' }, onClick: () => console.log('Info') }\n];\n"]}