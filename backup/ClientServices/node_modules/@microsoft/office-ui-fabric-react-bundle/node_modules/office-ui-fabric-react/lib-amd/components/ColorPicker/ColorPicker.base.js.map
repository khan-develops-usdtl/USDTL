{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles, IColorPicker, IColorPickerStrings } from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\n// These imports are separated to help with bundling\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_HUE,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX\n} from '../../utilities/color/consts';\nimport { IColor, IRGB } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\n\ntype IRGBHex = Pick<IColor, 'r' | 'g' | 'b' | 'a' | 'hex'>;\n\nexport interface IColorPickerState {\n  color: IColor;\n  editingColor?: {\n    component: keyof IRGBHex;\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst colorComponents: Array<keyof IRGBHex> = ['hex', 'r', 'g', 'b', 'a'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps: Partial<IColorPickerProps> = {\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      hue: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel!,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat!,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription!\n    }\n  };\n\n  private _textChangeHandlers: {\n    [K in keyof IRGBHex]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\n  };\n  /**\n   * Strings displayed in the UI as text field labels (these are in a separate object for convenient\n   * indexing by short color component name).\n   */\n  private _textLabels: { [K in keyof IRGBHex]: string };\n  /** Strings besides red/green/blue/alpha/hex */\n  private _strings: Required<IColorPickerStrings>;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of colorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n\n    const strings = props.strings!; // always defined since it's in defaultProps\n    const defaultStrings = ColorPickerBase.defaultProps.strings as Required<IColorPickerStrings>;\n\n    this._textLabels = {\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex\n    };\n\n    this._strings = {\n      ...defaultStrings,\n      ...strings\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      const color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const strings = this._strings;\n    const textLabels = this._textLabels;\n    const { theme, className, styles, alphaSliderHidden } = props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    const colorStr = color.str || '';\n    // Space out hex and RGBA colors for more helpful reading\n    const selectedColorAria =\n      colorStr[0] === '#'\n        ? colorStr.split('').join(' ')\n        : colorStr.indexOf('rgba(') === 0\n        ? `R G B A ${color.r} ${color.g} ${color.b} ${color.a!}%`\n        : colorStr;\n    const ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAria);\n\n    return (\n      <div className={classNames.root} role=\"group\" aria-label={ariaLabel}>\n        <div className={classNames.panel}>\n          <ColorRectangle\n            color={color}\n            onChange={this._onSVChanged}\n            ariaLabel={strings.svAriaLabel}\n            ariaDescription={strings.svAriaDescription}\n            ariaValueFormat={strings.svAriaValueFormat}\n            className={classNames.colorRectangle}\n          />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider\n                className=\"is-hue\"\n                ariaLabel={strings.hue}\n                minValue={0}\n                maxValue={MAX_COLOR_HUE}\n                value={color.h}\n                onChange={this._onHChanged}\n              />\n              {!alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  isAlpha\n                  ariaLabel={textLabels.a}\n                  overlayColor={color.hex}\n                  minValue={0}\n                  maxValue={MAX_COLOR_ALPHA}\n                  value={color.a}\n                  onChange={this._onAChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Give the table role=group to prevent it from being read as a table (ideally we should\n          just get rid of the table, but this has the potential of breaking consumers) */}\n          <table className={classNames.table} role=\"group\" cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{textLabels.hex}</td>\n                <td>{textLabels.r}</td>\n                <td>{textLabels.g}</td>\n                <td>{textLabels.b}</td>\n                {!alphaSliderHidden && <td>{textLabels.a}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {...colorComponents.map((comp: keyof IRGBHex) => {\n                  if (comp === 'a' && alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp} style={comp === 'hex' ? undefined : { width: '18%' }}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._onBlur}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={textLabels[comp]}\n                        autoComplete=\"off\"\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: keyof IColor): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\n    this._updateColor(ev, updateA(this.state.color, Math.round(a)));\n  };\n\n  private _onTextChange(component: keyof IRGBHex, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue)\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value)\n          } as IRGB)\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string, too short (hex only), or just . (alpha only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({ color: newColor, editingColor: undefined });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]}