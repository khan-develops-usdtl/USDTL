{"version":3,"file":"Breadcrumb.base.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles\n} from './Breadcrumb.types';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const { onReduceData = this._onReduceData, overflowIndex, maxDisplayedItems, items, className, theme, styles } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!\n    });\n\n    return <ResizeGroup onRenderData={this._onRenderBreadcrumb} onReduceData={onReduceData} data={breadcrumbData} />;\n  }\n\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    if (movedItem !== undefined) {\n      return { ...data, renderedItems, renderedOverflowItems };\n    }\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ReactType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      }\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\n        {onRenderItem(item, this._onRenderItem)}\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n          <DividerType className={this._classNames.chevron} iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'} item={item} />\n        )}\n      </li>\n    ));\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <IconButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, ['className']);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone componentRef={this._focusZone} direction={FocusZoneDirection.horizontal} {...this.props.focusZoneProps}>\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    if (item.onClick || item.href) {\n      return (\n        <Link\n          as={item.as}\n          className={this._classNames.itemLink}\n          href={item.href}\n          aria-current={item.isCurrentItem ? 'page' : undefined}\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = item.as || 'span';\n      return (\n        <Tag className={this._classNames.item}>\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"]}