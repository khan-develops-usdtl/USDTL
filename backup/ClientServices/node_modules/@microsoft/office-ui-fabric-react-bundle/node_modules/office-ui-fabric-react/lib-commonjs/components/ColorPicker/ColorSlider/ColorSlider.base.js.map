{"version":3,"file":"ColorSlider.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider/ColorSlider.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, EventGroup, KeyCodes, getWindow, warnDeprecations } from '../../../Utilities';\nimport { IColorSliderProps, IColorSliderStyleProps, IColorSliderStyles, IColorSlider } from './ColorSlider.types';\nimport { clamp } from '../../../utilities/color/clamp';\n\nconst getClassNames = classNamesFunction<IColorSliderStyleProps, IColorSliderStyles>();\n\nexport interface IColorSliderState {\n  currentValue: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorSliderBase extends React.Component<IColorSliderProps, IColorSliderState> implements IColorSlider {\n  public static defaultProps: Partial<IColorSliderProps> = {\n    minValue: 0,\n    maxValue: 100,\n    value: 0\n  };\n\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor'\n    });\n\n    this.state = {\n      currentValue: props.value || 0\n    };\n  }\n\n  public get value(): number {\n    return this.state.currentValue;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorSliderProps>, prevState: Readonly<IColorSliderState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({ currentValue: this.props.value });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { isAlpha, minValue, maxValue, overlayStyle, overlayColor, theme, className, styles } = this.props;\n    const { ariaLabel = isAlpha ? 'Alpha' : 'Hue' } = this.props;\n    const currentValue = this.value;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isAlpha\n    });\n\n    const currentPercentage = (100 * (currentValue! - minValue!)) / (maxValue! - minValue!);\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        tabIndex={0}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        role=\"slider\"\n        aria-valuenow={currentValue}\n        // Narrator doesn't read aria-valuenow properly\n        aria-valuetext={String(currentValue)}\n        aria-valuemin={minValue}\n        aria-valuemax={maxValue}\n        aria-label={ariaLabel}\n        data-is-focusable={true}\n      >\n        {!!(overlayStyle || overlayColor) && (\n          <div\n            className={classNames.sliderOverlay}\n            // this isn't included in getStyles because it may change frequently\n            style={overlayStyle || { background: `linear-gradient(to right, transparent 0, #${overlayColor} 100%)` }}\n          />\n        )}\n        <div className={classNames.sliderThumb} style={{ left: currentPercentage + '%' }} />\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent): void => {\n    let currentValue = this.value;\n    const { minValue, maxValue } = this.props;\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.left: {\n        currentValue -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        currentValue += increment;\n        break;\n      }\n      case KeyCodes.home: {\n        currentValue = minValue!;\n        break;\n      }\n      case KeyCodes.end: {\n        currentValue = maxValue!;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    this._updateValue(ev, clamp(currentValue, maxValue!, minValue));\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const win = getWindow(this as any);\n\n    this._events.on(win, 'mousemove', this._onMouseMove, true);\n    this._events.on(win, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const { minValue, maxValue } = this.props;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = clamp(Math.round(currentPercentage * maxValue!), maxValue!, minValue!);\n\n    this._updateValue(ev, newValue);\n  };\n\n  private _onMouseUp = (): void => {\n    this._events.off();\n  };\n\n  private _updateValue(ev: React.MouseEvent | React.KeyboardEvent, newValue: number) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  }\n}\n"]}