{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics } from '../../Utilities';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5,\n  unknown = 999\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    constructor(props: TProps) {\n      super(props);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: _defaultMode || _lastMode || ResponsiveMode.large\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent ref={this._updateComposedComponentRef} responsiveMode={responsiveMode} {...this.props as any} />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = this._getResponsiveMode();\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode: responsiveMode\n        });\n      }\n    };\n\n    private _getResponsiveMode(): ResponsiveMode {\n      let responsiveMode = ResponsiveMode.small;\n      const element = findDOMNode(this) as Element;\n      const win = getWindow(element);\n\n      if (typeof win !== 'undefined') {\n        try {\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n            responsiveMode++;\n          }\n        } catch (e) {\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n          responsiveMode = _defaultMode || _lastMode || ResponsiveMode.large;\n        }\n\n        // Tracking last mode just gives us a better default in future renders,\n        // which avoids starting with the wrong value if we've measured once.\n        _lastMode = responsiveMode;\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error(\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\n              'Call setResponsiveMode to define what the responsive mode is.'\n          );\n        }\n      }\n\n      return responsiveMode;\n    }\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n"]}