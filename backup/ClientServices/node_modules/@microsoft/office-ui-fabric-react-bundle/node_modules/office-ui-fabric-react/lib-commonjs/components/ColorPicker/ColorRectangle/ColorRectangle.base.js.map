{"version":3,"file":"ColorRectangle.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, EventGroup, initializeComponentRef, KeyCodes, getId } from '../../../Utilities';\nimport { IColorRectangleProps, IColorRectangleStyleProps, IColorRectangleStyles, IColorRectangle } from './ColorRectangle.types';\n\n// These imports are separated to help with bundling\nimport { IColor } from '../../../utilities/color/interfaces';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase extends React.Component<IColorRectangleProps, IColorRectangleState> implements IColorRectangle {\n  public static defaultProps: Partial<IColorRectangleProps> = {\n    minSize: 220,\n    ariaLabel: 'Saturation and brightness',\n    ariaValueFormat: 'Saturation {0} brightness {1}',\n    ariaDescription: 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n  };\n\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isAdjustingSaturation: boolean = true;\n  private _descriptionId = getId('ColorRectangle-description');\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = { color: props.color };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorRectangleProps>, prevState: Readonly<IColorRectangleState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.color) {\n      this.setState({ color: this.props.color });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles, ariaValueFormat, ariaLabel, ariaDescription } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      minSize\n    });\n\n    const valueText = ariaValueFormat!.replace('{0}', String(color.s)).replace('{1}', String(color.v));\n\n    return (\n      <div\n        ref={this._root}\n        tabIndex={0}\n        className={classNames.root}\n        style={{ backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n        onKeyDown={this._onKeyDown}\n        role=\"slider\"\n        // Proper description of the current hue *and* saturation (screen reader typically chooses this over aria-valuenow)\n        aria-valuetext={valueText}\n        // Narrator reads aria-valuetext first, but it also reads aria-valuenow after a pause, and\n        // per the aria spec this defaults to halfway between min/max (50) if we don't provide it.\n        // So provide the value of the most recently adjusted thing.\n        aria-valuenow={this._isAdjustingSaturation ? color.s : color.v}\n        aria-valuemin={0}\n        aria-valuemax={MAX_COLOR_VALUE}\n        aria-label={ariaLabel}\n        aria-describedby={this._descriptionId}\n        data-is-focusable={true}\n      >\n        <div className={classNames.description} id={this._descriptionId}>\n          {ariaDescription}\n        </div>\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { color } = this.state;\n    let { s, v } = color;\n\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.up: {\n        this._isAdjustingSaturation = false;\n        v += increment; // V = 100 (lightest) is at the top\n        break;\n      }\n      case KeyCodes.down: {\n        this._isAdjustingSaturation = false;\n        v -= increment; // V = 0 (darkest) is at the bottom\n        break;\n      }\n      case KeyCodes.left: {\n        this._isAdjustingSaturation = true;\n        s -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        this._isAdjustingSaturation = true;\n        s += increment;\n        break;\n      }\n      default:\n        return;\n    }\n\n    this._updateColor(ev, updateSV(color, clamp(s, MAX_COLOR_SATURATION), clamp(v, MAX_COLOR_VALUE)));\n  };\n\n  private _updateColor(ev: React.MouseEvent | React.KeyboardEvent, color: IColor): void {\n    const { onChange } = this.props;\n\n    const oldColor = this.state.color;\n    if (color.s === oldColor.s && color.v === oldColor.v) {\n      return; // no change\n    }\n\n    if (onChange) {\n      onChange(ev, color);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({ color });\n      ev.preventDefault();\n    }\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent): void => {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._disableEvents, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n    // event handlers and exit. (this may only be relevant while debugging)\n    // tslint:disable-next-line:no-bitwise\n    if (!(ev.buttons & 1)) {\n      this._disableEvents();\n      return;\n    }\n\n    const newColor = _getNewColor(ev, this.state.color, this._root.current);\n    if (newColor) {\n      this._updateColor(ev, newColor);\n    }\n  };\n\n  private _disableEvents = (): void => {\n    this._events.off();\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(ev: React.MouseEvent, prevColor: IColor, root: HTMLElement): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(Math.round(sPercentage * MAX_COLOR_SATURATION), MAX_COLOR_SATURATION),\n    clamp(Math.round(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE), MAX_COLOR_VALUE)\n  );\n}\n"]}